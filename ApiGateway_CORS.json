{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description" : "This CloudFormation Template provides API Gateway with CORS ENABLED on its method",
  
  "Parameters": {

    "BucketLambdaCode": {
      "Description": "The S3 bucket name that is stored the Lambda code",
      "Type": "String",
      "Default": "bucket-lambda-code-test"
    },

    "CodeZIPFileName": {
      "Description": "The code file name .zip",
      "Type": "String",
      "Default": "lambda_code/function1.zip"
    }

  },
  
  "Resources": {

    "IAMRoleBasicLambda": {
      "Type": "AWS::IAM::Role",
      "Properties": {

        "RoleName": "laPolicia",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": "lambda.amazonaws.com" },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonS3FullAccess",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ]
      }
    },

    "LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [ "IAMRoleBasicLambda" ],
      "Properties": {

        "Code": {
          "S3Bucket" : { "Ref": "BucketLambdaCode" },
          "S3Key": { "Ref": "CodeZIPFileName" }
        },
        
        "FunctionName": "function1",
        "Description": "Lambda to execute code",
        "Handler": "lambda_function.lambda_handler",
        "MemorySize": 128,
        "Runtime": "python3.7",
        "Role": { "Fn::GetAtt" : ["IAMRoleBasicLambda", "Arn"] }
      }
      
    },

    "APIGatewayRestAPI": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "APIGatewayAPI",
        "EndpointConfiguration":{
          "Types": [ "REGIONAL" ]
        }
      }
    },

    "APIGatewayResource": {
      "Type": "AWS::ApiGateway::Resource",
      "DependsOn": [ "APIGatewayRestAPI", "LambdaFunction" ],
      "Properties": {
        "RestApiId": { "Ref": "APIGatewayRestAPI" },
        "ParentId": { "Fn::GetAtt": ["APIGatewayRestAPI", "RootResourceId"] },
        "PathPart": "myresource"
      }
    },

    "APIGatewayMethodPost": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": [ "APIGatewayResource" ],
      "Properties": {
        "RestApiId": { "Ref": "APIGatewayRestAPI" },
        "ResourceId": { "Ref": "APIGatewayResource" },
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationResponses": [ 
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }            
            } 
          ],
          "IntegrationHttpMethod": "POST",
        
          "Uri": {"Fn::Join" : ["", 
            ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["LambdaFunction", "Arn"]}, "/invocations"]
          ]}
        },
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]

      }
    },

    "APIGatewayOptions": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": [ "APIGatewayMethodPost" ],
      "Properties": {
        "RestApiId": { "Ref": "APIGatewayRestAPI" },
        "ResourceId": { "Ref": "APIGatewayResource" },
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "Type": "MOCK",
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              },
              "StatusCode": "200"
            }
          ],
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          }
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "StatusCode": "200"
          }
        ]
      }
    },

    "APIGatewayDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [ "APIGatewayMethodPost", "APIGatewayOptions" ],
      "Properties": {
        "RestApiId": { "Ref": "APIGatewayRestAPI" },
        "StageName": "prod"
      }
    },

    "APIGatewayLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [ "APIGatewayDeployment" ],
      "Properties": {
        "Action": "lambda:invokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "FunctionName": { "Fn::GetAtt" : [ "LambdaFunction", "Arn"] },
        "SourceArn": {"Fn::Join": ["", 
          ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "APIGatewayRestAPI"}, "/*"]
        ]}
      }
    }  

  }

}