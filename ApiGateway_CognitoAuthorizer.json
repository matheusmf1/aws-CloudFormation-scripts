{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description" : "This CloudFormation Template provides API Gateway with Cognito Authorizer, Lambda to upload to a pre existing S3 buchet config file and also API Gateway Method with CORS enabled",
  
  "Parameters": {

    "BucketWebApplication": {
      "Description": "The S3 bucket name to store the web application",
      "Type": "String",
      "Default": "test-bucket-web-application"
    },

    "BucketConfigCodeFile": {
      "Description": "The path to the config code to receive the cognito UserPool, Client, Region and Bucket",
      "Type": "String",
      "Default": "js/config.js"
    },

    "BucketLambdaCode": {
      "Description": "The S3 bucket name that is stored all Lambda functions",
      "Type": "String",
      "Default": "bucket-lambda-code-test"
    },

    "CodeZIPFileName": {
      "Description": "The code file name .zip",
      "Type": "String",
      "Default": "lambda_code/function1.zip"
    }

  },
  
  "Resources": {

    "IAMRoleBasicLambda": {
      "Type": "AWS::IAM::Role",
      "Properties": {

        "RoleName": "laPolicia",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": "lambda.amazonaws.com" },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonS3FullAccess",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ]
      }
    },

    "CognitoUserPool": {
      "Type": "AWS::Cognito::UserPool",
      "Properties": {
        "UserPoolName": "testCognitoCF",
        "AliasAttributes": [ "email" ],
        "AutoVerifiedAttributes": [ "email" ]
      }
    },

    "CognitoUserPoolClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "DependsOn": [ "CognitoUserPool" ],
      "Properties": {
        "ClientName" : "testClientCF",
        "UserPoolId": { "Ref": "CognitoUserPool" },
        "GenerateSecret": false
      }
    },

    "CognitoConfigRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "laPoliciaCognito",

        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": "lambda.amazonaws.com" },
              "Action": "sts:AssumeRole"
            }
          ]
        },

        "Policies": [
          {
            "PolicyName": "CognitoConfigTest",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "Logging",
                  "Effect": "Allow",
                  "Action": [ "logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents" ],
                  "Resource": "*"
                },
                {
                  "Sid": "Cognito",
                  "Effect": "Allow",
                  "Action": [ 
                    "cognito-idp:CreateUserPool", 
                    "cognito-idp:DeleteUserPool",
                    "cognito-idp:CreateUserPoolClient",
                    "cognito-idp:DeleteUserPoolClient"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "ConfigBucketWriteAccess",
                  "Effect": "Allow",
                  "Action": [ "s3:PutObject", "s3:PutObjectAcl", "s3:PutObjectVersionAcl" ],
                  "Resource": { "Fn::Sub": "arn:aws:s3:::${BucketWebApplication}" }
                }
              ]
            }
          }
        ]
      }
    },

    "LambdaUpdateCognitoConfigS3CustomResources": {
      "Type": "Custom::S3CustomResource",
      "DependsOn": [ "CognitoUserPool", "APIGatewayRestAPI" ],
      "Properties": { 
        "ServiceToken": { "Fn::GetAtt" : [ "LambdaUpdateCognitoConfigS3", "Arn"] },
        "UserPool": { "Ref": "CognitoUserPool" },
        "Client": { "Ref": "CognitoUserPoolClient" },
        "Region": { "Ref": "AWS::Region" },
        "Bucket": { "Ref": "BucketWebApplication" },
        "invokeUrl": { "Fn::Sub": "https://${APIGatewayRestAPI}.execute-api.${AWS::Region}.amazonaws.com/prod" },
        "filePath": { "Ref": "BucketConfigCodeFile" }
      }
    },

    "LambdaUpdateCognitoConfigS3": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [ "IAMRoleBasicLambda", "APIGatewayDeployment" ],
      "Properties": {

        "Description": "Update config.js file from web application bucket",
        "FunctionName": "UpdateConfigS3WebFile_test",
        "Handler": "index.lambda_handler",
        "Role": { "Fn::GetAtt" : ["IAMRoleBasicLambda", "Arn"] },
        "Timeout": 120,
        "Runtime": "python3.7",

        "Code": {
          "ZipFile": { "Fn::Join" : ["\n", [
            
            "import boto3",
            "import cfnresponse",
            "import json\n",

            "s3 = boto3.resource('s3')\n",

            "def create( properties, physical_id ):\n",
            "   userPoolId = properties['UserPool']",
            "   clientId = properties['Client']",
            "   region = properties['Region']",
            "   bucket = properties['Bucket']",
            "   invokeUrl = properties['invokeUrl']",
            "   filePath = properties['filePath']\n",

            "   config_content = \"\"\" window._config = { cognito: { userPoolId: '%s', userPoolClientId: '%s', region: '%s' }, api: { invokeUrl: '%s' } } \"\"\" ",
            "   config_content = config_content % (userPoolId, clientId, region, invokeUrl)",
            "   config = s3.Object(bucket,f'{filePath}')",
            "   config.put(Body=config_content)\n",
            "   return cfnresponse.SUCCESS, None\n",

            "def update( properties, physical_id ):",
            "   return create(properties, physical_id)\n",

            "def delete( properties, physical_id ):",
            "   return cfnresponse.SUCCESS, physical_id\n",

            "def lambda_handler(event, context):\n",

            "   print(\"UpdateConfigS3WebFile\")",
            "   print(event)",
            "   status = cfnresponse.FAILED",       
            "   new_physical_id = None\n",              

            "   try:\n",
            
            "       properties = event.get('ResourceProperties')",
            "       physical_id = event.get('PhysicalResourceId')",
            "       status, new_physical_id = { ",
            "           'Create': create,",
            "           'Update': update,",
            "           'Delete': delete,",
            "       }.get(event['RequestType'], lambda x, y: (cfnresponse.FAILED, None))(properties, physical_id)\n",
            
            "   except Exception as e:",
            "       print(\"Execution failed...\")",
            "       print(str(e))",
            "       status = cfnresponse.FAILED",
            "       cfnresponse.send(event, context, status, {}, new_physical_id)\n",
            "   finally:",
            "       cfnresponse.send(event, context, status, {}, new_physical_id)"
          ]]}
        }

      }
    },

    "LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [ "IAMRoleBasicLambda" ],
      "Properties": {

        "Code": {
          "S3Bucket" : { "Ref": "BucketLambdaCode" },
          "S3Key": { "Ref": "CodeZIPFileName" }
        },
        
        "FunctionName": "function1",
        "Description": "Lambda to execute code",
        "Handler": "lambda_function.lambda_handler",
        "MemorySize": 128,
        "Runtime": "python3.7",
        "Role": { "Fn::GetAtt" : ["IAMRoleBasicLambda", "Arn"] }
      }
      
    },

    "APIGatewayRestAPI": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "APIGatewayAPI",
        "EndpointConfiguration":{
          "Types": [ "REGIONAL" ]
        }
      }
    },

    "APIGatewayResource": {
      "Type": "AWS::ApiGateway::Resource",
      "DependsOn": [ "APIGatewayRestAPI", "LambdaFunction" ],
      "Properties": {
        "RestApiId": { "Ref": "APIGatewayRestAPI" },
        "ParentId": { "Fn::GetAtt": ["APIGatewayRestAPI", "RootResourceId"] },
        "PathPart": "myresource"
      }
    },

    "APIGatewayCognitoAuthorizer": {
      "Type" : "AWS::ApiGateway::Authorizer",
      "DependsOn": [ "CognitoUserPool", "APIGatewayResource" ],
      "Properties": {
        "Type": "COGNITO_USER_POOLS",
        "Name": "testAPICognitoAuth",
        "IdentitySource": "method.request.header.Authorization",
        "ProviderARNs": [ { "Fn::GetAtt": ["CognitoUserPool", "Arn"] }],
        "RestApiId": { "Ref": "APIGatewayRestAPI" }
      }
    },

    "APIGatewayMethodPostFileUpdateAPI": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": [ "APIGatewayCognitoAuthorizer" ],
      "Properties": {
        "RestApiId": { "Ref": "APIGatewayRestAPI" },
        "ResourceId": { "Ref": "APIGatewayResource" },
        "HttpMethod": "POST",
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": { "Ref": "APIGatewayCognitoAuthorizer" },
        
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationResponses": [ 
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }            
            } 
          ],
          "IntegrationHttpMethod": "POST",
        
          "Uri": {"Fn::Join" : ["", 
            ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["LambdaFunction", "Arn"]}, "/invocations"]
          ]}
        },
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]

      }
    },

    "APIGatewayOptions": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": [ "APIGatewayMethodPostFileUpdateAPI" ],
      "Properties": {
        "RestApiId": { "Ref": "APIGatewayRestAPI" },
        "ResourceId": { "Ref": "APIGatewayResource" },
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "Type": "MOCK",
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              },
              "StatusCode": "200"
            }
          ],
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          }
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "StatusCode": "200"
          }
        ]
      }
    },

    "APIGatewayDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [ "APIGatewayMethodPostFileUpdateAPI", "APIGatewayOptions" ],
      "Properties": {
        "RestApiId": { "Ref": "APIGatewayRestAPI" },
        "StageName": "prod"
      }
    },

    "APIGatewayLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [ "APIGatewayDeployment" ],
      "Properties": {
        "Action": "lambda:invokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "FunctionName": { "Fn::GetAtt" : [ "LambdaFunction", "Arn"] },
        "SourceArn": {"Fn::Join": ["", 
          ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "APIGatewayRestAPI"}, "/*"]
        ]}
      }
    }  

  }

}